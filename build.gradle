apply plugin: 'java'
apply plugin: 'maven'
apply plugin: 'signing'
apply from: "${project.rootDir}/gradle/eclipse.gradle"
import java.nio.file.Files

sourceCompatibility = 1.8
targetCompatibility = 1.8

group = 'de.mediathekview'
archivesBaseName = "MLib"
version = '4.0.0'

ext {
    propsFile = file('src/main/resources/version.properties').absoluteFile
    if (!propsFile.exists()) {
        Files.createFile(propsFile.toPath())
    }
}

def loadVersionProperties() {
    Properties props = new Properties()
    props.load(propsFile.newDataInputStream())
    return props
}

compileJava {
    options.encoding = "UTF-8"
    options.compilerArgs = ['-Xlint:all']
}

compileTestJava {
    options.encoding = "UTF-8"
    options.compilerArgs = ['-Xlint:all']
}


repositories {
    mavenLocal()
    mavenCentral()
    maven {
    	url "https://oss.sonatype.org/content/repositories/snapshots/"
    }
}

if (project.hasProperty('SONATYPE_USERNAME')) {
    signing {
        sign configurations.archives
    }
	
	uploadArchives {
	  println 'Uploading Version '+version
	  repositories {
	    mavenDeployer {
	      beforeDeployment { MavenDeployment deployment -> signing.signPom(deployment) }
	
	      repository(url: "https://oss.sonatype.org/content/repositories/releases/") {
	        authentication(userName: SONATYPE_USERNAME, password: SONATYPE_PASSWORD)
	      }
	
	      snapshotRepository(url: "https://oss.sonatype.org/content/repositories/snapshots/") {
	        authentication(userName: SONATYPE_USERNAME, password: SONATYPE_PASSWORD)
	      }
	
	      pom.project {
	        name project.name
	        packaging 'jar'
	        description 'The libary for mediathekview/MediathekView and mediathekview/MServer'
	        url 'https://github.com/mediathekview/' + project.name
	
	        scm {
	          connection 'scm:git:git://github.com/mediathekview/MLib.git'
	          developerConnection 'scm:git:ssh://github.com:mediathekview/MLib.git'
	          url 'http://github.com/mediathekview/MLib/tree/master'
	        }
	
	        licenses {
	          license {
	            name 'GNU General Public License v3.0'
	            url 'https://www.gnu.org/licenses/gpl.html'
	          }
	        }
	
	        developers {
	          developer {
	            id 'Nicklas2751'
	            name 'Nicklas Wiegandt'
	            email 'nicklas@mediathekview.de'
	          }
	          developer {
	            id 'derreisende77'
	            name 'Christian F.'
	            url 'https://github.com/derreisende77'
	          }
	          developer {
	            id 'pidoubleyou'
	            name 'Peter W.'
	            url 'https://github.com/pidoubleyou'
	          }
	          developer {
	            id 'TheSasch'
	            name 'Sascha Wiegandt'
	            url 'https://github.com/thesasch'
	          }
	          developer {
	            id 'alex1702'
	            name 'Alexander Finkh√§user'
	            url 'https://github.com/alex1702'
	          }
	        }
	      }
	    }
	  }
	}
	task myJavadocs(type: Javadoc) {
	  source = sourceSets.main.allJava
	  failOnError = false
	}
	
	task javadocJar(type: Jar) {
	    classifier = 'javadoc'
	    from myJavadocs
	}
	    
	task sourcesJar(type: Jar) {
	    classifier = 'sources'
	    from sourceSets.main.allSource
	}
	
	artifacts {
	    archives javadocJar, sourcesJar
	}
}
build.dependsOn(install)

dependencies {
    compile group: 'org.apache.commons',        name: 'commons-lang3',    version: '3.8'
    compile group: 'org.apache.commons',        name: 'commons-compress', version: '1.18'
    compile group: 'org.tukaani',               name: 'xz',               version: '1.8' // Apache Commons-compress needs this for xz-Format
    compile group: 'com.squareup.okhttp3',      name: 'okhttp',           version: '3.11.0'
    compile group: 'org.apache.logging.log4j',  name: 'log4j-core',       version: '2.11.1'
    compile group: 'com.google.code.gson',      name: 'gson',             version: '2.8.5'
    compile group: 'com.github.fabriziocucci',  name: 'yacl4j-core',      version: '0.9.2'
    compile group: 'org.glassfish.jersey.core', name: 'jersey-client',    version: '2.27'
    
    testCompile group: 'junit',       name: 'junit',           version: '4.12'
    testCompile group: 'org.hamcrest', name: 'hamcrest-junit', version: '2.0.0.0'
}

task copyTestResources(type: Copy) {
    from "${projectDir}/src/test/resources"
    into "${buildDir}/classes/java/test"
}
processTestResources.dependsOn copyTestResources

task updateVersion {
    doLast {
        Properties props = loadVersionProperties()
        def oldVersion = props.getProperty('VERSION')
        String buildDate = new Date().format('dd.MM.yyyy HH:mm:ss')
        if (!oldVersion.equals(project.version)) {
            logger.lifecycle "==mlib======================"
            logger.lifecycle "Version: $project.version"
            logger.lifecycle "Baudatum: $buildDate"
            logger.lifecycle "==mlib======================"
            props.setProperty('VERSION', project.version)
            props.setProperty('DATE', buildDate)
            props.store(propsFile.newWriter(), null)
        }
    }
}
processResources.dependsOn updateVersion

/**
 * <b>You don't have to call this. Travis will do it for you if a new releass (tag) will be build!<b/>
 * Call this so: './gradlew build release -PrepoPw=[PASSWORD]'
 */
task release(dependsOn: 'uploadArchives') {
    doLast {
        println 'Released Version '+version
    }
}

/**
 * <b>You don't have to call this. Travis will do it for you if you push to develop!<b/>
 * Call this so: './gradlew build releaseSnapshot -PrepoPw=[PASSWORD]'
 */
task releaseSnapshot(dependsOn: 'uploadArchives') {
    doLast {
        println 'Released Snapshot Version '+version
    }
}

gradle.taskGraph.whenReady {taskGraph ->
    if (!taskGraph.hasTask(release)) {
        version = version+'-SNAPSHOT'
    }
}
