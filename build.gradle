apply plugin: 'java'
apply plugin: 'application'
apply from: "${project.rootDir}/gradle/eclipse.gradle"
import java.nio.file.Files

sourceCompatibility = 1.8
targetCompatibility = 1.8
mainClassName = 'mSearch.Main'
version = '2.0.2'

compileJava {
    options.encoding = "UTF-8"
    options.compilerArgs = ['-Xlint:all']
}

compileTestJava {
    options.encoding = "UTF-8"
    options.compilerArgs = ['-Xlint:all']
}


task copyRuntimeLibs(type: Copy) {
    into "libs"
    from configurations.testRuntime - configurations.runtime
  }

repositories {
     maven {
          url "https://repo.mediathekview.de/repository/maven-public/"
    }
}

dependencies {
    compile 'org.apache.commons:commons-lang3:3.5'
    compile 'com.fasterxml.jackson.core:jackson-core:2.7.0'
    compile 'com.jidesoft:jide-oss:3.6.16'
    compile 'org.tukaani:xz:1.5'
}

ext {
    propsFile = file('src/main/resources/version.properties').absoluteFile
    if(!propsFile.exists()) {
        Files.createFile(propsFile.toPath())
    }
}

def loadVersionProperties() {
    Properties props = new Properties()
    props.load(propsFile.newDataInputStream())
    return props
}

task updateVersion << {
    Properties props = loadVersionProperties()
    def oldVersion = props.getProperty('VERSION')
    if(!oldVersion.equals(project.version)) {
	logger.lifecycle "==msearch======================"
	logger.lifecycle "Version: $project.version"
	logger.lifecycle "==msearch======================"
	props.setProperty('VERSION', project.version)	
	props.store(propsFile.newWriter(), null)
    }
}

processResources.dependsOn updateVersion

distributions {

    main {
        baseName = 'MSearch'
        contents {
            from{'res'}
        }
    }
}

/**
 * HOWTO debug:
 *  1. run "gradle debug"
 *  2. Call your IDE to connect to a remote java application on port 5005.
 */
task debug (type: JavaExec, dependsOn: classes){
    main = 'mSearch.Main'
    classpath = sourceSets.main.runtimeClasspath
    args '-gui'
    debug true
}
